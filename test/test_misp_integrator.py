import mock
import os.path


class TestMISPIntegrator(object):
    def test_init_misp_integrator(self, misp_integrator):
        attr = misp_integrator.attributes

        assert len(attr) == 32
        assert attr['payload'] == 'External analysis,other'
        assert attr['reference'] == 'External analysis,text'
        assert attr['stept-to-reproduce'] == 'External analysis,comment'
        assert attr['ip'] == 'Network activity,ip-dst'
        assert attr['analyzed-port'] == 'External analysis,port'
        assert attr['user-agent'] == 'External analysis,user-agent'
        assert attr['port'] == 'External analysis,port'
        assert attr['tested-on'] == 'External analysis,comment'
        assert attr['group'] == 'Attribution,threat-actor'
        assert attr['py-imports'] == 'External analysis,other'
        assert attr['additional-emails'] == 'Social network,email-src'
        assert attr['id'] == 'Internal reference,text'
        assert attr['platform'] == 'External analysis,comment'
        assert attr['tested-version'] == 'External analysis,text'
        assert attr['version'] == 'External analysis,text'
        assert attr['software-link'] == 'External analysis,link'
        assert attr['usage'] == 'External analysis,other'
        assert attr['irc'] == 'Social network,text'
        assert attr['type'] == 'External analysis,other'
        assert attr['email'] == 'Social network,email-src'
        assert attr['website'] == 'External analysis,link'
        assert attr['vendor'] == 'External analysis,other'
        assert attr['cve'] == 'External analysis,vulnerability'
        assert attr['additional-urls'] == 'External analysis,link'
        assert attr['md5'] == 'External analysis,md5'
        assert attr['github'] == 'Social network,github-repository'
        assert attr['help-parser-arg'] == 'External analysis,comment'
        assert attr['vendor-homepage'] == 'External analysis,link'
        assert attr['contact'] == 'Social network,text'
        assert attr['google-dork'] == 'External analysis,other'
        assert attr['content-type'] == 'Payload delivery,mime-type'
        assert attr['example'] == 'External analysis,other'

        misp_integrator.misp.get_tags_list.assert_called_once()
        assert 1 in misp_integrator.tag_ids

        misp_integrator.misp.get_taxonomies_list.assert_called_once()
        misp_integrator.misp.enable_taxonomy.assert_called_once_with(6)
        misp_integrator.misp.enable_taxonomy_tags.assert_called_once_with(6)

        assert misp_integrator.tag_ids == [1, 4, 5, 6]
        assert misp_integrator.logger.warn.call_count == 2
        misp_integrator.logger.warn.assert_has_calls([
            mock.call(
                'Could not find taxonomy: '
                'europol-event:exploit-tool-exhausting-resources.'),
            mock.call(
                'Could not find tag: '
                'CERT-XLM:intrusion-attempts="exploit-known-vuln".')],
            any_order=True)

    def test_set_tag_id(self, misp_integrator):
        """
        Tests the _set_tag_id method in intialization phase of the integrator
        with the exception that the tag needs to be created.
        """
        misp_integrator.misp.get_tags_list.return_value = []
        misp_integrator.misp.new_tag.return_value = {
            'Tag': {
                'id': 2
            }
        }
        misp_integrator.tag_ids = []
        misp_integrator._set_tag_id('another tag', '#ffffff')
        misp_integrator.misp.new_tag.assert_called_with(
            name='another tag', colour='#ffffff')
        assert misp_integrator.tag_ids == [2]

    def test_create_event(self, misp_integrator):
        date = '2019-02-22'
        description = 'test event'
        misp_integrator.logger.reset_mock()
        uuid = misp_integrator._create_event(date, description)

        assert uuid == '0b15844f-4d04-4ba3-b290-55f693b7b87c'
        misp_integrator.misp.new_event.assert_called_with(
            date=date, info=description,
            distribution=misp_integrator.distribution)

        assert misp_integrator.misp.tag.call_count == 4
        misp_integrator.logger.warn.call_count == 2
        misp_integrator.logger.warn.assert_has_calls([
            mock.call(
                'Could not tag event {}: {}'.format(
                    uuid, {'message': 'error while attaching'})),
            mock.call(
                'Could not tag event {}: {}'.format(
                    uuid, {'message': 'error while attaching'}))])

    def test_add_attributes_to_event(self, misp_integrator):
        uuid = '0b15844f-4d04-4ba3-b290-55f693b7b87c'
        misp_type = 'port'
        port = 8080
        category = 'External analysis'

        # first call
        misp_integrator._add_attributes_to_event(
            uuid, misp_type, [port], category)
        misp_integrator.misp.add_named_attribute.call_count == 1
        misp_integrator.misp.add_named_attribute.assert_called_with(
            uuid, misp_type, port, category=category)

        # second call
        misp_integrator.misp.add_named_attribute.reset_mock()
        misp_integrator._add_attributes_to_event(
            uuid, misp_type, [port], category, new_event=False)
        misp_integrator.misp.add_named_attribute.call_count == 0
        assert misp_integrator.misp.search.call_count == 1
        misp_integrator.misp.search.assert_called_with(
            uuid=uuid, type_attribute=misp_type, category=category,
            values=[port], controller='attributes')

        # third call
        misp_integrator._add_attributes_to_event(
            uuid, misp_type, [1234], category, new_event=False)
        misp_integrator.misp.add_named_attribute.call_count == 1
        assert misp_integrator.misp.search.call_count == 2
        misp_integrator.misp.add_named_attribute.assert_called_with(
            uuid, misp_type, 1234, category=category)

    def test_add_exploit_poc_template(self, misp_integrator, misp_filenames,
                                      generic_object_generator_mock,
                                      exploit_test_dir):
        uuid = '0b15844f-4d04-4ba3-b290-55f693b7b87c'
        author = 'foo bar'
        description = 'misp poc description'
        for filename in misp_filenames:
            exploit = {
                'file': filename,
                'author': author,
                'description': description
            }
            misp_integrator._add_exploit_poc_template(
                uuid, exploit)

            with open(os.path.join(exploit_test_dir, filename)) as f:
                poc = f.read()

            generic_object_generator_mock.return_value.generate_attributes.\
                assert_called_with([{
                    'poc': poc,
                    'references': '{}/tree/master/{}'.format(
                        misp_integrator.remote_git, filename),
                    'author': author,
                    'description': description
                }])
            assert misp_integrator.misp.add_object.call_count == \
                len(misp_filenames)
            misp_integrator.misp.add_object.assert_called_with(
                uuid, generic_object_generator_mock.return_value.template_uuid,
                generic_object_generator_mock.return_value)

    def test_integrate(self, misp_integrator, misp_filenames):
        """
        In this test case we can test the same misp mock calls as it were in
        the other test cases above.
        """
        date = '2019-02-22'
        author = 'foo bar'
        description = 'misp poc description'
        first_exploit_uuid = '0b15844f-4d04-4ba3-b290-55f693b7b87c'
        second_exploit_uuid = 'c6ecbfa2-f026-4fc3-96f5-8b95a2ad50de'
        exploits = []

        # first exploit is not yet in db. second exploit alreadey has a
        # misp-uuid and does not need the same attributes as the first one.
        for e_id, filename in enumerate(misp_filenames):
            exploits.append(
                {
                    'id': e_id,
                    'file': filename,
                    'date': date,
                    'author': author,
                    'description': description,
                    'type': 'dos',
                    'md5': ['d41d8cd98f00b204e9800998ecf8427e']
                })
        exploits.append(
            {
                'id': len(misp_filenames),
                'misp-uuid': second_exploit_uuid,
                'version': [1.0],
                'py-imports': ['sys', 'os', 'mock']
            })

        misp_integrator.integrate(exploits)

        # asserts for the first exploit
        misp_integrator.misp.new_event.assert_called_with(
            date=date, info=description,
            distribution=misp_integrator.distribution)

        assert misp_integrator.misp.tag.call_count == 4
        misp_integrator.logger.warn.call_count == 2

        # the first exploit was added to db
        assert list(misp_integrator.db.collection.find(
            {'misp-uuid': first_exploit_uuid})) is not []

        assert misp_integrator.misp.add_object.call_count == \
            len(misp_filenames)

        # asserts for the second exploit
        misp_integrator.misp.get_event.assert_called_with(
            second_exploit_uuid)
        assert misp_integrator.misp.search.call_count == 5

        # asserts for both exploits
        misp_integrator.misp.add_named_attribute.call_count == 6
        # id of first exploit already in the exploit dict, so it will not be
        # added to misp again
        misp_integrator.misp.add_named_attribute.assert_has_calls([
            mock.call(
                first_exploit_uuid, 'other', 'dos',
                category='External analysis'),
            mock.call(
                first_exploit_uuid, 'md5', 'd41d8cd98f00b204e9800998ecf8427e',
                category='External analysis'),
            mock.call(
                second_exploit_uuid, 'text', 1, category='Internal reference'),
            mock.call(
                second_exploit_uuid, 'text', 1.0,
                category='External analysis'),
            mock.call(
                second_exploit_uuid, 'other', 'sys',
                category='External analysis'),
            mock.call(
                second_exploit_uuid, 'other', 'os',
                category='External analysis'),
            mock.call(
                second_exploit_uuid, 'other', 'mock',
                category='External analysis'),
        ], any_order=True)
