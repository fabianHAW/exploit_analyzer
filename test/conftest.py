import pytest
import mock

from configparser import ConfigParser

from exploitdb.exploit_separator import Separator
from exploitdb.exploit_analyzer import CommentAnalyzer, CodeAnalyzer
from database.db_interface import MongoDBConnection


"""
General fixtures
"""


# doesn't matter if config_parser_mock_separator or config_parser_mock_analyzer
# is used
@pytest.fixture
def exploit_test_dir(config_parser_mock_separator):
    return config_parser_mock_separator().get('git', 'local_git')


"""
Separator fixtures
"""


@pytest.fixture
def config_parser_mock_separator():
    with mock.patch('exploitdb.exploit_separator.get_config_parser') \
            as config_parser_mock_separator:
        parser = ConfigParser()
        parser.read('conf/test_config.cfg')
        config_parser_mock_separator.return_value = parser
        yield config_parser_mock_separator


@pytest.fixture
def python_separator(config_parser_mock_separator):
    return Separator.create_separator('python', mock.Mock())


@pytest.fixture
def separator_comment_dir(config_parser_mock_separator):
    return config_parser_mock_separator().get('separator', 'comment_dir')


@pytest.fixture
def separator_code_dir(config_parser_mock_separator):
    return config_parser_mock_separator().get('separator', 'code_dir')


@pytest.fixture
def separator_quarantine_dir(config_parser_mock_separator):
    return config_parser_mock_separator().get('separator', 'quarantine_dir')


@pytest.fixture
def separator_filenames(config_parser_mock_separator):
    filenames = {}
    filenames['read'] = config_parser_mock_separator().get(
        'python-test-files', 'read')
    filenames['write'] = config_parser_mock_separator().get(
        'python-test-files', 'write')
    filenames['sep_succ'] = config_parser_mock_separator().get(
        'python-test-files', 'sep_succ')
    filenames['sep_indent_err'] = config_parser_mock_separator().get(
        'python-test-files', 'sep_indent_err')
    return filenames


"""
CommentAnalyzer/CodeAnalyzer fixtures
"""


@pytest.fixture
def config_parser_mock_analyzer():
    with mock.patch('exploitdb.exploit_analyzer.get_config_parser') \
            as config_parser_mock_analyzer:
        parser = ConfigParser()
        parser.read('conf/test_config.cfg')
        config_parser_mock_analyzer.return_value = parser
        yield config_parser_mock_analyzer


@pytest.fixture
def comment_analyzer_filenames(config_parser_mock_analyzer):
    filenames = []
    filenames.append(config_parser_mock_analyzer().get(
        'python-test-files', 'comment_analyze'))
    return filenames


@pytest.fixture
def comment_analyzer(comment_analyzer_filenames, config_parser_mock_analyzer):
    ca = CommentAnalyzer()
    for filename in comment_analyzer_filenames:
        ca.result.setdefault(filename, {})
    return ca


@pytest.fixture
def comment_analyzer_merge_result(
        comment_analyzer, comment_analyzer_filenames):
    for filename in comment_analyzer_filenames:
        comment_analyzer.result[filename] = {
                'e-mail': ['foo@bar.de'],
                'email': ['bar@foo.de']
            }
    return comment_analyzer


@pytest.fixture
def code_analyzer_filenames(config_parser_mock_analyzer):
    filenames = []
    filenames.append(config_parser_mock_analyzer().get(
        'python-test-files', 'code_analyze'))
    return filenames


@pytest.fixture
def code_analyzer(code_analyzer_filenames, config_parser_mock_analyzer):
    cda = CodeAnalyzer()
    for filename in code_analyzer_filenames:
        cda.result.setdefault(filename, {})
    return cda


"""
Utils fixtures
"""


@pytest.fixture
def results():
    return {
        'exploit.py': {
            'cve': [
                'cve-1234-5678'
            ],
            'ip': [
                '1.1.1.1'
            ]
        }
    }, {
        'exploit.py': {
            'cve': [
                'cve-9876-5432'
            ],
            'ip': [
                '2.2.2.2'
            ]
        }
    }


@pytest.fixture
def email_results():
    return {
        'exploit.py': {
            'additional_emails': ['foo@bar.de',
                                  'bar@foo.de',
                                  'foobar@barfoo.de'
                                  ],
            'email': ['foo@bar.de',
                      'bar@foo.de'
                      ]
        }
    }


@pytest.fixture
def url_results():
    return {
        'exploit.py': {
            'additional_urls': [
                'www.foo.bar',
                'www.bar.foo',
                'http://www.foobar.barfoo'
            ],
            'software link': [
                'www.foo.bar'
            ],
            'vendor homepage': [
                'www.bar.foo'
            ]
        }
    }


"""
Databse fixtures
"""


@pytest.fixture
def config_parser_mock_database():
    with mock.patch('database.db_interface.get_config_parser') \
            as config_parser_mock_database:
        parser = ConfigParser()
        parser.read('conf/test_config.cfg')
        config_parser_mock_database.return_value = parser
        yield config_parser_mock_database


@pytest.fixture
def db_instance(config_parser_mock_database):
    db = MongoDBConnection(mock.Mock(), db_name='testdb', collection='test')
    db.collection.insert_many([
        {
            'id': 1,
            'file': 'file1.c'
        },
        {
            'id': 2,
            'file': 'file2.py'
        }
    ])
    yield db
    db.collection.drop()
    db.close()
