import os.path
import ast


class TestExploitAnalyzer(object):
    def test_read_file(self, comment_analyzer, config_parser_mock_analyzer,
                       exploit_test_dir):
        """
        Tests read_file() method of baseclass ExploitAnalyzer.
        """
        exploit = os.path.join(
            exploit_test_dir,
            config_parser_mock_analyzer().get('python-test-files', 'read'))
        exploit_read_func = comment_analyzer.read_file(exploit)
        with open(exploit) as f:
            exploit_read_man = f.read()
        assert exploit_read_func == exploit_read_man

    def test_general_analyze(self, separator_comment_dir,
                             config_parser_mock_analyzer, comment_analyzer,
                             comment_analyzer_filenames, code_analyzer,
                             code_analyzer_filenames, separator_code_dir):
        """
        Tests _general_analyze() method of baseclass ExploitAnalyzer.
        """
        for filename in comment_analyzer_filenames:
            exploit = os.path.join(separator_comment_dir, filename)
            exploit = comment_analyzer.read_file(exploit)
            comment_analyzer._general_analyze(exploit, filename)
            result = comment_analyzer.result[filename]

            assert result['cve'] == ['cve-1234-56789']
            assert result['ip'] == ['1.1.1.1']
            assert sorted(result['additional_urls']) == sorted(
                ['http://www.foo.bar', 'http://www.github.com'])
            assert sorted(result['additional_emails']) == \
                sorted(['foo@bar.de', 'bar@foo.de'])

            assert 'cve-09871-1234567' not in result['cve']
            assert 'a1.2.2.2' not in result['ip']
            assert 'htttp://www.barfoo.de' not in result['additional_urls']
            assert 'bar@@foo.de' not in result['additional_emails']

            assert len(result) == 4

        for filename in code_analyzer_filenames:
            exploit = os.path.join(separator_code_dir, filename)
            exploit = code_analyzer.read_file(exploit)
            code_analyzer._general_analyze(exploit, filename)
            result = code_analyzer.result[filename]

            assert result['cve'] == ['cve-1234-5678']
            assert result['ip'] == ['1.1.1.1']

            assert len(result) == 2

    def test_generate_stats(self, code_analyzer, code_analyzer_filenames,
                            comment_analyzer_filenames, comment_analyzer):
        for filename in comment_analyzer_filenames:
            comment_analyzer.analyze(filename)
            comment_analyzer.generate_stats()
        result = comment_analyzer.result_counter

        assert len(result) == 22

        assert result['website'] == 1
        assert result['vendor'] == 1
        assert result['version'] == 2
        assert result['reference'] == 1
        assert result['ip'] == 1
        assert result['google dork'] == 1
        assert result['github'] == 1
        assert result['irc'] == 1
        assert result['md5'] == 1
        assert result['additional_emails'] == 2
        assert result['steps to reproduce'] == 1
        assert result['group'] == 1
        assert result['vendor homepage'] == 1
        assert result['tested on'] == 1
        assert result['additional_urls'] == 2
        assert result['software link'] == 1
        assert result['example'] == 1
        assert result['contact'] == 1
        assert result['tested version'] == 1
        assert result['usage'] == 1
        assert result['cve'] == 1
        assert result['email'] == 2

        for filename in code_analyzer_filenames:
            code_analyzer.analyze(filename)
            code_analyzer.generate_stats()
        result = code_analyzer.result_counter

        assert len(result) == 10

        assert result['user-agent'] == 3
        assert result['analyzed_port'] == 1
        assert result['py_imports'] == 2
        assert result['content-type'] == 3
        assert result['payload'] == 1
        assert result['help_parser_arg'] == 2
        assert result['additional_urls'] == 0
        assert result['additional_emails'] == 0
        assert result['ip'] == 1
        assert result['cve'] == 1


class TestCommentAnalyzer(object):
    def test_merge_similar_tags(self, comment_analyzer_merge_result,
                                comment_analyzer_filenames):
        for filename in comment_analyzer_filenames:
            comment_analyzer_merge_result._merge_similar_tags(filename)
            result = comment_analyzer_merge_result.result[filename]
            assert sorted(result['email']) == \
                sorted(['foo@bar.de', 'bar@foo.de'])
            assert 'e-mail' not in result

            assert len(comment_analyzer_merge_result.result[filename]) == 1

    def test_result_check(self, comment_analyzer):
        assert comment_analyzer._result_check('n/a') == ''
        assert comment_analyzer._result_check('na') == ''
        assert comment_analyzer._result_check('[]') == ''

        assert comment_analyzer._result_check('####') == ''
        assert comment_analyzer._result_check('------') == ''
        assert comment_analyzer._result_check('aaaa') == ''

        assert comment_analyzer._result_check('result') == 'result'

    def test_hash_handling(self, comment_analyzer):
        assert comment_analyzer._hash_handling('#comment') == 'comment'
        assert comment_analyzer._hash_handling('comment#') == 'comment'
        assert comment_analyzer._hash_handling('##comment##') == 'comment'
        assert comment_analyzer._hash_handling('comment') == 'comment'

    def test_analyze(self, comment_analyzer_filenames, comment_analyzer):
        # note: no del_multiple_urls nor del_multiple_emails is used here,
        # so it is right if urls or emails are duplicated in additional_urls,
        # additional_emails and other tags
        for filename in comment_analyzer_filenames:
            comment_analyzer.analyze(filename)
            result = comment_analyzer.result[filename]

            assert len(result.values()) == 22

            assert sorted(result['additional_urls']) == sorted([
                'http://www.foo.bar', 'http://www.github.com'])
            assert result['ip'] == ['1.1.1.1']
            assert result['google dork'] == ['dork']
            assert result['website'] == ['www.website.de']
            assert result['irc'] == ['irc']
            assert sorted(result['additional_emails']) == sorted(
                ['foo@bar.de', 'bar@foo.de'])
            assert result['usage'] == ['python anaylze.py']
            assert result['vendor homepage'] == ['www.vendor.de']
            assert result['md5'] == ['2a1e274f94e822338af1cf1a1a5c87b7']
            assert result['software link'] == ['www.link.de']
            assert result['vendor'] == ['vendor']
            assert result['github'] == ['http://www.github.com']
            assert result['tested on'] == ['debian']
            assert result['contact'] == ['foo@bar.de']
            assert result['cve'] == ['cve-1234-56789']
            assert sorted(result['version']) == sorted(['1.1', '1.0'])
            assert result['tested version'] == ['1.0']
            assert result['steps to reproduce'] == ['step 1, step 2, etc.']
            assert result['reference'] == ['www.reference.de']
            assert sorted(result['email']) == sorted(
                ['bar@foo.de', 'foo@bar.de'])
            assert result['example'] == ['example']
            assert result['group'] == ['milw0rm.com']


class TestCodeAnalyzer(object):
    def test_assign_node(self, code_analyzer, code_analyzer_filenames,
                         separator_code_dir):
        """
        _assign_node_helper is also tested in this case
        """
        for filename in code_analyzer_filenames:
            exploit = os.path.join(separator_code_dir, filename)
            exploit = code_analyzer.read_file(exploit)
            tree = ast.parse(exploit)
            for node in ast.walk(tree):
                if isinstance(node, ast.Assign):
                    code_analyzer._assign_node(node, filename)
            result = code_analyzer.result[filename]
            assert result['user-agent'] == ['Mozilla', 'Firefox']
            # note: "content-type:" is not removed here, because it is not an
            # augassign node
            assert result['content-type'] == ['text/html']
            assert result['payload'] == ['payload']
            assert result['analyzed_port'] == ['1234']

            assert len(result) == 4

    def test_augassign_node(self, code_analyzer, code_analyzer_filenames,
                            separator_code_dir):
        for filename in code_analyzer_filenames:
            exploit = os.path.join(separator_code_dir, filename)
            exploit = code_analyzer.read_file(exploit)
            tree = ast.parse(exploit)
            for node in ast.walk(tree):
                if isinstance(node, ast.AugAssign):
                    code_analyzer._augassign_node(node, filename)
            result = code_analyzer.result[filename]
            assert result['content-type'] == ['text/xml']

            assert len(result) == 1

    def test_expr_node(self, code_analyzer, code_analyzer_filenames,
                       separator_code_dir):
        for filename in code_analyzer_filenames:
            exploit = os.path.join(separator_code_dir, filename)
            exploit = code_analyzer.read_file(exploit)
            tree = ast.parse(exploit)
            for node in ast.walk(tree):
                if isinstance(node, ast.Expr):
                    code_analyzer._expr_node(node, filename)
            result = code_analyzer.result[filename]
            assert sorted(result['help_parser_arg']) == \
                sorted(['no_param: no arg', 't: t arg'])

            assert len(result) == 1

    def test_dict_node(self, code_analyzer, code_analyzer_filenames,
                       separator_code_dir):
        for filename in code_analyzer_filenames:
            exploit = os.path.join(separator_code_dir, filename)
            exploit = code_analyzer.read_file(exploit)
            tree = ast.parse(exploit)
            for node in ast.walk(tree):
                if isinstance(node, ast.Dict):
                    code_analyzer._dict_node(node, filename)
            result = code_analyzer.result[filename]
            assert result['content-type'] == \
                ['application/x-www-form-urlencoded']
            assert result['user-agent'] == ['Mozilla-Agent']

            assert len(code_analyzer.result[filename]) == 2

    def test_result_add(self, code_analyzer, code_analyzer_filenames):
        for filename in code_analyzer_filenames:
            code_analyzer._result_add(filename, 'foo', 'bar')
            code_analyzer._result_add(filename, 'bar', 'foo')
            code_analyzer._result_add(filename, 'foo', 'baz')
            result = code_analyzer.result[filename]
            assert sorted(result['foo']) == sorted(['bar', 'baz'])
            assert result['bar'] == ['foo']

            assert len(result) == 2

    def test_analyze(self, code_analyzer, code_analyzer_filenames):
        for filename in code_analyzer_filenames:
            code_analyzer.analyze(filename)
            result = code_analyzer.result[filename]

            assert len(result) == 8

            assert sorted(result['user-agent']) == \
                sorted(['Mozilla', 'Firefox', 'Mozilla-Agent'])
            assert result['analyzed_port'] == ['1234']
            assert sorted(result['py_imports']) == sorted(['argparser', 'sys'])
            assert sorted(result['content-type']) == sorted(
                ['text/xml', 'text/html', 'application/x-www-form-urlencoded'])
            assert result['payload'] == ['payload']
            assert sorted(result['help_parser_arg']) == \
                sorted(['no_param: no arg', 't: t arg'])
            assert result['ip'] == ['1.1.1.1']
            assert result['cve'] == ['cve-1234-5678']
