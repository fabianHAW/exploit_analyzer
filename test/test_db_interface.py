import mock

from bson.errors import InvalidStringData


class TestDatabaseInterface(object):
    def test_get_all_exploits(self, db_instance):
        exploits = db_instance.get_all_exploits()

        assert len(exploits) == 2
        assert exploits[0]['id'] == 1
        assert exploits[0]['file'] == 'file1.c'
        assert exploits[1]['id'] == 2
        assert exploits[1]['file'] == 'file2.py'

    def test_insert_exploits(self, db_instance):
        exploits = [
            {
                'id': 3,
                'file': 'file3.rb'
            },
            {
                'id': 4,
                'file': 'file4.cpp'
            }
        ]

        db_instance.insert_exploits(exploits)
        all_exploits = list(db_instance.collection.find())

        assert len(all_exploits) == 4
        assert all_exploits[0]['id'] == 1
        assert all_exploits[0]['file'] == 'file1.c'
        assert all_exploits[1]['id'] == 2
        assert all_exploits[1]['file'] == 'file2.py'
        assert all_exploits[2]['id'] == 3
        assert all_exploits[2]['file'] == 'file3.rb'
        assert all_exploits[3]['id'] == 4
        assert all_exploits[3]['file'] == 'file4.cpp'

    def test_get_exploits_by_file_extension(self, db_instance):
        py_exploits = list(db_instance.get_exploits_by_file_extension('py'))

        assert len(py_exploits) == 1
        assert py_exploits[0]['id'] == 2
        assert py_exploits[0]['file'] == 'file2.py'

        c_exploits = list(db_instance.get_exploits_by_file_extension('c'))

        assert len(py_exploits) == 1
        assert c_exploits[0]['id'] == 1
        assert c_exploits[0]['file'] == 'file1.c'

    def test_get_exploits_by_file_extension_and_id(self, db_instance):
        db_instance.collection.insert_one({
            'id': 5,
            'file': 'file5.py'
        })
        py_exploits = list(
            db_instance.get_exploits_by_file_extension_and_id('py', [2, 5]))

        assert len(py_exploits) == 2
        assert py_exploits[0]['id'] == 2
        assert py_exploits[0]['file'] == 'file2.py'
        assert py_exploits[1]['id'] == 5
        assert py_exploits[1]['file'] == 'file5.py'

    def test_insert_or_update_exploits_by_id(self, db_instance):
        first_exploit = list(db_instance.collection.find({'id': 1}))

        assert len(first_exploit) == 1
        assert first_exploit[0]['id'] == 1
        assert first_exploit[0]['file'] == 'file1.c'

        first_exploit[0]['file'] = 'changed.c'
        first_exploit[0].pop('_id')
        new_exploits = [{
            'id': 6,
            'file': 'file6.py'
        }]
        new_exploits.extend(first_exploit)
        db_instance.insert_or_update_exploits_by_id(new_exploits)
        exploits = list(db_instance.collection.find({'id': {'$in': [1, 6]}}))

        assert len(exploits) == 2
        assert exploits[0]['id'] == 1
        assert exploits[0]['file'] == 'changed.c'
        assert exploits[1]['id'] == 6
        assert exploits[1]['file'] == 'file6.py'

    def test_update_exploits_by_file(self, db_instance):
        second_exploit = list(db_instance.collection.find({'id': 2}))

        assert len(second_exploit) == 1
        assert second_exploit[0]['id'] == 2
        assert second_exploit[0]['file'] == 'file2.py'

        new_exploit = {
            'file2.py': {
                'id': 2,
                'file': 'changed.py'
            }
        }
        db_instance.update_exploits_by_file(new_exploit)
        changed_exploit = list(db_instance.collection.find({'id': 2}))

        assert len(changed_exploit) == 1
        assert changed_exploit[0]['id'] == 2
        assert changed_exploit[0]['file'] == 'changed.py'


class TestDatabaseInterfaceExceptions(object):
    def test_insert_or_update_exploits_by_id(self, db_instance):
        new_exploit = [{
            'no_id': 6,
            'file': 'file6.py'
        }]

        db_instance.insert_or_update_exploits_by_id(new_exploit)
        exploits = list(db_instance.collection.find({'id': 6}))

        assert len(exploits) == 0
        assert db_instance.logger.error.call_count == 1
        assert db_instance.logger.error.call_args == \
            mock.call("Unexpected exception 'id' for filename file6.py.",
                      exc_info=True)

    def test_update_exploits_by_file(self, db_instance):
        new_exploit = {
            'no_file': {
                'id': 0,
                'file': 'changed.py'
            }
        }
        # check warn log
        db_instance.update_exploits_by_file(new_exploit)
        changed_exploit = list(db_instance.collection.find({'id': 0}))

        assert len(changed_exploit) == 0
        assert db_instance.logger.warn.call_count == 1
        assert db_instance.logger.warn.call_args == \
            mock.call('Exploit with filename no_file not found.')

        db_instance.logger.warn.reset_mock()

        db_instance.collection.update_one = mock.Mock(
            side_effect=Exception('test exception'))
        db_instance.update_exploits_by_file(new_exploit)
        assert db_instance.logger.error.call_count == 1
        assert db_instance.logger.error.call_args == \
            mock.call(
                'Unexpected exception test exception for filename no_file.',
                exc_info=True)

        db_instance.logger.error.reset_mock()

        db_instance.collection.update_one = mock.Mock(
            side_effect=InvalidStringData())
        db_instance.update_exploits_by_file(new_exploit)
        assert db_instance.logger.warn.call_count == 1
        assert db_instance.logger.warn.call_args == \
            mock.call('InvalidStringData for filename no_file.')
