import mock

from bson.errors import InvalidStringData


class TestDatabaseInterface(object):
    def test_get_all_exploits(self, db_instance):
        exploits = db_instance.get_all_exploits()

        assert len(exploits) == 2
        assert exploits[0]['id'] == 1
        assert exploits[0]['file'] == 'file1.c'
        assert exploits[1]['id'] == 2
        assert exploits[1]['file'] == 'file2.py'

    def test_insert_exploits(self, db_instance):
        exploits = [
            {
                'id': 3,
                'file': 'file3.rb'
            },
            {
                'id': 4,
                'file': 'file4.cpp'
            }
        ]

        db_instance.insert_exploits(exploits)
        all_exploits = list(db_instance.collection.find())

        assert len(all_exploits) == 4
        assert all_exploits[0]['id'] == 1
        assert all_exploits[0]['file'] == 'file1.c'
        assert all_exploits[1]['id'] == 2
        assert all_exploits[1]['file'] == 'file2.py'
        assert all_exploits[2]['id'] == 3
        assert all_exploits[2]['file'] == 'file3.rb'
        assert all_exploits[3]['id'] == 4
        assert all_exploits[3]['file'] == 'file4.cpp'

    def test_get_exploits_by_file_extension(self, db_instance):
        py_exploits = db_instance.get_exploits_by_file_extension('py')

        assert len(py_exploits) == 1
        assert py_exploits[0]['id'] == 2
        assert py_exploits[0]['file'] == 'file2.py'

        c_exploits = db_instance.get_exploits_by_file_extension('c')

        assert len(py_exploits) == 1
        assert c_exploits[0]['id'] == 1
        assert c_exploits[0]['file'] == 'file1.c'

    def test_get_exploits_by_file_extension_in_date_range(self, db_instance):
        py_exploits = \
            db_instance.get_exploits_by_file_extension_in_date_range(
                'py', '2019-10-04', '2019-10-01')

        assert len(py_exploits) == 1
        assert py_exploits[0]['id'] == 2
        assert py_exploits[0]['file'] == 'file2.py'

        c_exploits = \
            db_instance.get_exploits_by_file_extension_in_date_range(
                'c', '2019-10-04', '2019-10-01')

        assert len(py_exploits) == 1
        assert c_exploits[0]['id'] == 1
        assert c_exploits[0]['file'] == 'file1.c'

    def test_get_exploits_by_file_extension_and_id(self, db_instance):
        db_instance.collection.insert_one({
            'id': 5,
            'file': 'file5.py'
        })
        py_exploits = db_instance.get_exploits_by_file_extension_and_id(
            'py', [2, 5])

        assert len(py_exploits) == 2
        assert py_exploits[0]['id'] == 2
        assert py_exploits[0]['file'] == 'file2.py'
        assert py_exploits[1]['id'] == 5
        assert py_exploits[1]['file'] == 'file5.py'

    def test_insert_or_update_exploits_by_id(self, db_instance):
        first_exploit = list(db_instance.collection.find({'id': 1}))

        assert len(first_exploit) == 1
        assert first_exploit[0]['id'] == 1
        assert first_exploit[0]['file'] == 'file1.c'

        first_exploit[0]['file'] = 'changed.c'
        first_exploit[0].pop('_id')
        new_exploits = [{
            'id': 6,
            'file': 'file6.py'
        }]
        new_exploits.extend(first_exploit)
        db_instance.insert_or_update_exploits_by_id(new_exploits)
        exploits = list(db_instance.collection.find({'id': {'$in': [1, 6]}}))

        assert len(exploits) == 2
        assert exploits[0]['id'] == 1
        assert exploits[0]['file'] == 'changed.c'
        assert exploits[1]['id'] == 6
        assert exploits[1]['file'] == 'file6.py'

    def test_count_all_documents_by_extension_in_date_range(self, db_instance):
        py_counts = db_instance.count_all_documents_by_extension_in_date_range(
            'py', '2019-10-04')
        assert py_counts == 1

        py_counts = db_instance.count_all_documents_by_extension_in_date_range(
            'py', '2019-10-01')
        assert py_counts == 0

        py_counts = db_instance.count_all_documents_by_extension_in_date_range(
            'py', '2019-10-04', '2019-10-01')
        assert py_counts == 1

        py_counts = db_instance.count_all_documents_by_extension_in_date_range(
            'py', '2019-10-01', '2019-09-30')
        assert py_counts == 0

    def test_count_tags_by_extension_in_date_range(self, db_instance):
        py_counts = db_instance.count_tags_by_extension_in_date_range(
            'ip', 'py', '2019-10-04')
        assert py_counts == 1

        py_counts = db_instance.count_tags_by_extension_in_date_range(
            'cve', 'py', '2019-10-04')
        assert py_counts == 0

        py_counts = db_instance.count_tags_by_extension_in_date_range(
            'ip', 'py', '2019-10-04', '2019-10-01')
        assert py_counts == 1

        py_counts = db_instance.count_tags_by_extension_in_date_range(
            'cve', 'py', '2019-10-04', '2019-10-01')
        assert py_counts == 0

    def test_sum_of_tags_by_extension_in_date_range(self, db_instance):
        tag_counts, sum_of_docs = \
            db_instance.sum_of_tags_by_extension_in_date_range(
                'ip', 'py', '2019-10-04')
        assert tag_counts == [{
            u'date': u'2019-10-02',
            u'ip': [u'2.2.2.2'],
            u'tag_count': 1,
            u'file': u'file2.py'
            }]
        assert sum_of_docs == 1

        tag_counts, sum_of_docs = \
            db_instance.sum_of_tags_by_extension_in_date_range(
                'ip', 'py', '2019-10-04', '2019-10-03')
        assert tag_counts == []
        assert sum_of_docs == 0

        tag_counts, sum_of_docs = \
            db_instance.sum_of_tags_by_extension_in_date_range(
                'ip', 'c', '2019-10-04')
        assert tag_counts == [{
            u'date': u'2019-10-01',
            u'ip': [u'1.1.1.1'],
            u'tag_count': 1,
            u'file': u'file1.c'
            }]
        assert sum_of_docs == 1

        tag_counts, sum_of_docs = \
            db_instance.sum_of_tags_by_extension_in_date_range(
                'cve', 'py', '2019-10-04')
        assert tag_counts == []
        assert sum_of_docs == 0

    def test_find_exploit_by_file_in_date_range(self, db_instance):
        py_found = db_instance.find_exploit_by_file_in_date_range(
            'file2.py', '2019-10-04')
        # need to delete mongo specific id, because it various
        py_found.pop('_id')
        assert py_found == {
            'id': 2,
            'file': 'file2.py',
            'date': '2019-10-02',
            'ip': ['2.2.2.2']
        }

        py_found = db_instance.find_exploit_by_file_in_date_range(
            'file2.py', '2019-10-01')
        assert py_found is None

        py_found = db_instance.find_exploit_by_file_in_date_range(
            'file2.py', '2019-10-04', '2019-10-01')
        # need to delete mongo specific id, because it various
        py_found.pop('_id')
        assert py_found == {
            'id': 2,
            'file': 'file2.py',
            'date': '2019-10-02',
            'ip': ['2.2.2.2']
        }

        py_found = db_instance.find_exploit_by_file_in_date_range(
            'file2.py', '2019-10-01', '2019-09-30')
        assert py_found is None


class TestDatabaseInterfaceExceptions(object):
    def test_insert_or_update_exploits_by_id(self, db_instance):
        new_exploit = [{
            'id': 6,
            'file': 'file6.py'
        }]
        db_instance.collection.update_one = mock.Mock(side_effect=Exception(
            'insert exception'))
        db_instance.insert_or_update_exploits_by_id(new_exploit)
        exploits = list(db_instance.collection.find({'id': 6}))

        assert len(exploits) == 0
        assert db_instance.logger.error.call_count == 1
        assert db_instance.logger.error.call_args == \
            mock.call("Unexpected exception insert exception for id 6.",
                      exc_info=True)

        db_instance.collection.update_one = mock.Mock(
            side_effect=InvalidStringData())
        db_instance.insert_or_update_exploits_by_id(new_exploit)
        exploits = list(db_instance.collection.find({'id': 6}))

        assert len(exploits) == 0
        assert db_instance.logger.warn.call_count == 1
        assert db_instance.logger.warn.call_args == \
            mock.call("InvalidStringData for exploit id 6.")
