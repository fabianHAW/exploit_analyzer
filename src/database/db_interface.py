from pymongo import MongoClient
from bson.errors import InvalidStringData

from config.config_parser import get_main_config_parser


class MongoDBConnection(object):

    def __init__(self, logger, db_name='exploitdb', collection='exploits'):
        """
        Declares some object attributes.
        :param logger: A logger object for this connection class.
        :param db_name (str): Name of the database to use; default is
        "exploitdb".
        :param collection (str): Name of the collection to use; default is
        "exploits".
        """
        self.parser = get_main_config_parser()
        self.client = MongoClient(self.parser.get('mongodb', 'url'))
        self.collection = self.client[db_name][collection]
        self.logger = logger

    def get_all_exploits(self):
        """
        Retrieves all data of the initialized collection.
        :return: List of retrieved dict objects.
        """
        return list(self.collection.find())

    def insert_exploits(self, data):
        """
        Inserts data into the initialized collection.
        :param data (list): List of dict objects to insert into the collection.
        """
        self.collection.insert_many(data)

    def get_exploits_by_file_extension(self, extension):
        """
        Retrieves all exploits by a given file extension.
        :param extension (str): Extension as string (e.g. py).
        :return: List of retrieved dict objects.
        """
        return list(self.collection.find(
            {
                'file': {
                    '$regex': '.{}$'.format(extension)
                }
            }))

    def get_exploits_by_file_extension_in_date_range(
            self, extension, date_lower, date_greater=''):
        """
        Retrieves all exploits by a given file extension in a given date range.
        :param extension (str): Extension as string (e.g. py).
        :param date_lower (str): A lower date.
        :param date_greater (str): A greater date; default is an empty string,
        so that this criteria is ignored.
        :return: List of retrieved dict objects.
        """
        return list(self.collection.find(
            {
                'date': {
                    '$gte': date_greater,
                    '$lte': date_lower
                },
                'file': {
                    '$regex': '.{}$'.format(extension)
                }
            }))

    def get_exploits_by_file_extension_and_id(self, extension, ids):
        """
        Retrieves all exploits by a given file extension and by the given ids.
        :param extension (str): Extension as string (e.g. py).
        :param ids (list): List of ids (int) to filter for.
        :return: List of retrived dict objects.
        """
        return list(self.collection.find(
            {
                'file': {
                    '$regex': '.{}$'.format(extension)
                },
                'id': {
                    '$in': ids
                }
            }))

    def insert_or_update_exploits_by_id(self, ins_up_exploits):
        """
        Inserts exploits or if the exploit already exists (compared by the id)
        it  updates it. If any Exception occurs while insert or update it will
        be logged as an error.
        :param ins_up_exploits (list): List of dict objects to insert or
        update.
        """
        for item in ins_up_exploits:
            try:
                self.collection.update_one(
                    {
                        'id': item['id']
                    },
                    {
                        '$set': item
                    },
                    upsert=True
                )
            except InvalidStringData:
                self.logger.warn('InvalidStringData for exploit id '
                                 '{}.'.format(item['id']))
            except Exception as e:
                self.logger.error(
                    'Unexpected exception {} for id {}.'.format(
                        e, item['id']), exc_info=True)

    def count_all_documents_by_extension_in_date_range(
            self, extension, date_lower, date_greater=''):
        """
        Counts all documents in the collection filtered by file extension and a
        date range.
        :param extension (str): Extension as string (e.g. py).
        :param date_lower (str): A lower date.
        :param date_greater (str): A greater date; default is an empty string,
        so that this criteria is ignored.
        :return: Number of counted documents as integer.
        """
        return self.collection.count_documents(
            {
                'date': {
                    '$gte': date_greater,
                    '$lte': date_lower
                },
                'file': {
                    '$regex': '.{}$'.format(extension)
                }
            })

    def count_tags_by_extension_in_date_range(
            self, tag, extension, date_lower, date_greater=''):
        """
        Counts all documents in the collection filtered by a tag, file
        extension and a date range. It checks if the tag exists and if it is
        not null.
        :param tag (str): A tag to filter for.
        :param extension (str): Extension as string (e.g. py).
        :param date_lower (str): A lower date.
        :param date_greater (str): A greater date; default is an empty string,
        so that this criteria is ignored.
        :return: Number of counted documents as integer.
        """
        return self.collection.count_documents(
            {
                '$and':
                [
                    {
                        'date': {
                            '$gte': date_greater,
                            '$lte': date_lower
                        }
                    }, {
                        tag: {
                            '$exists': 'true',
                            '$ne': None
                        }
                    }, {
                        'file': {
                            '$regex': '.{}$'.format(extension)
                        }
                    }
                ]
            })

    def sum_of_tags_by_extension_in_date_range(
            self, tag, extension, date_lower, date_greater=''):
        """
        Sums up the occurences of a tag in all documents in the collection
        filtered by a tag, file extension and a date range. It checks if the
        tag exists and if it is not null as well as if the value of a tag is
        an arrary; if not so it uses an empty array and counts 0.
        :param tag (str): A tag to filter for.
        :param extension (str): Extension as string (e.g. py).
        :param date_lower (str): A lower date.
        :param date_greater (str): A greater date; default is an empty string,
        so that this criteria is ignored.
        :return: 2-tuple:
            1. element: List of dictionaries of counted tags with the given
            tag, file, date and tag_count as keys.
            2. element: Number of counted documents as integer.
        """
        tag_mod = '${}'.format(tag)
        tag_counts = list(self.collection.aggregate([{
            '$project': {
                tag: 1,
                '_id': 0,
                'file': 1,
                'date': 1,
                'tag_count': {
                    '$size': {
                        '$cond': [
                            {
                                '$isArray': tag_mod
                            },
                            tag_mod,
                            []
                        ]
                    }
                }
            }
        }, {
            '$match': {
                '$and': [
                    {
                        'date': {
                            '$gte': date_greater,
                            '$lte': date_lower
                        }
                    }, {
                        tag: {
                            '$exists': 'true',
                            '$ne': None
                        }
                    }, {
                        'file': {
                            '$regex': '.{}$'.format(extension)
                        }
                    }
                ]
            }
        }
        ]))
        return tag_counts, sum([count['tag_count'] for count in tag_counts])

    def find_exploit_by_file_in_date_range(
            self, filename, date_lower, date_greater=''):
        """
        Searchs for an exploit in the collection filtered by a filename and a
        date range.
        :param filename (str): A filename for an exploit.
        :param date_lower (str): A lower date.
        :param date_greater (str): A greater date; default is an empty string,
        so that this criteria is ignored.
        :return: Returns True if the exploit was found; otherwise False.
        """
        exploit = self.collection.find_one(
            {
                '$and':
                [
                    {
                        'date': {
                            '$gte': date_greater,
                            '$lte': date_lower
                        }
                    }, {
                        'file': filename
                        }
                ]
            }
        )
        return exploit

    def close(self):
        """
        Closes the database connection.
        """
        self.client.close()
