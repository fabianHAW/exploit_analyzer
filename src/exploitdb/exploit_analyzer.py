import os.path
import re

from abc import ABCMeta, abstractmethod

from src.config.config_parser import get_config_parser


class ExploitAnalyzer(metaclass=ABCMeta):
    def __init__(self):
        self.parser = get_config_parser()
        self.comment_dir = self.parser.get('separator', 'comment_dir')
        self.code_dir = self.parser.get('separator', 'code_dir')
        self.result = {}

    def read_file(self, abs_filename):
        """
        abs_filename (str): Absolute path of the file.
        """
        with open(abs_filename) as f:
            exploit = f.read()
        return exploit

    def _general_analyze(self, exploit, filename):
        cve_pattern = r'cve-\d{4}-\d{4,7}'
        # important: in case of a line-break in this pattern string, we need to
        # add a double backslash at the end to keep \b in the string
        ip_addr_pattern = \
            r'\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)' \
            '{3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'
        cves = list(
            {x.group(0) for x in re.finditer(cve_pattern, exploit.lower())})
        ips = list(
            {x.group(0) for x in re.finditer(
                ip_addr_pattern, exploit.lower())})

        if cves:
            self.result[filename]['cve'] = cves
        if ips:
            self.result[filename]['ip'] = ips

    @abstractmethod
    def analyze(self, exploit, filename):
        self.result.setdefault(filename, {})
        self._general_analyze(exploit, filename)

    def _plot_stats(self):
        pass


class CommentAnalyzer(ExploitAnalyzer):
    def __init__(self):
        super().__init__()
        self.comment_tags = self.parser.get(
            'analyzer', 'comment_tags').split(',')

    def analyze(self, filename):
        abs_filename = os.path.join(self.comment_dir, filename)
        exploit = self.read_file(abs_filename)
        super().analyze(exploit, filename)
        """
        for tag in self.comment_tags:
            idx = exploit.lower().find(tag)
            if idx != -1:
                print(filename, ' ', tag)
        """


class CodeAnalyzer(ExploitAnalyzer):
    def analyze(self, filename):
        abs_filename = os.path.join(self.code_dir, filename)
        exploit = self.read_file(abs_filename)
        super().analyze(exploit, filename)
