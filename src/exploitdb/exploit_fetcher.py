import os.path

from git import Repo
from os import makedirs
from src.exploitdb.csv_parser import write_csv_to_db


def fetch_exploits(parser, db):
    LOCAL_GIT = parser.get('git', 'local_git')
    REMOTE_GIT = parser.get('git', 'remote_git')
    EXPLOITS_CSV_FILE = os.path.join(
        LOCAL_GIT, parser.get('git', 'exploits_csv_file'))
    if not os.path.exists(LOCAL_GIT):
        Repo.clone_from(REMOTE_GIT, LOCAL_GIT)
        write_csv_to_db(EXPLOITS_CSV_FILE, db)
        # create dirs for separator component
        makedirs(parser.get('separator', 'comment_dir'))
        makedirs(parser.get('separator', 'code_dir'))
        makedirs(parser.get('separator', 'quarantine_dir'))
    else:
        # TODO: not yet implemented
        pass
        """
        repo = Repo(LOCAL_GIT)
        # fetch_infos = repo.remotes.origin.pull()
        fetch_infos = repo.remotes.origin.fetch()
        for fetch_info in fetch_infos:
            # stats = fetch_info.commit.stats.files
            # if parser.get('git', 'exploits_csv_file') in stats:
                # csv file has changed
            #    pass
            print('iterate fetch_infos')
            for diff in fetch_info.commit.diff():
                pass
                # new commits available
                print('new diff found')
                if parser.get('git', 'exploits_csv_file') == diff.a_rawpath:
                    # csv file has changed
                    a_blob = diff.a_blob.data_stream.read().decode('utf-8')
                    b_blob = diff.b_blob.data_stread.read().decode('utf-8')
                    a_blob_split = a_blob.split('\n')
                    b_blob_split = b_blob.split('\n')
                    # TODO: vllt. muss hier ein csv geschrieben werden mit
                    # header
                    # da sonst die reihenfolge nicht mehr vorhanden ist..
                    # TODO: eine csv mit aenderungen und eine mit neuerungen.
                    # TODO: ggf. zip nutzen um aus zwei listen eine key-value
                    # relation zu erstellen (buch s. 62)
                    # get added lines
                    blob_diff = set(a_blob_split) - set(b_blob_split)
                    for diff in blob_diff:
                        line = diff.split('\n')
                        items = line.split(',')
                    # get deleted lines
                    # diff = set(b_blob_split) - set(a_blob_split)
        """
