import logging
import os
from database.db_interface import MongoDBConnection
from config.config_parser import get_main_config_parser


def _count_local_ip_addresses(py_exploits_by_range, num_exploit_ip,
                              date_lower, date_greater):
    result = {
        'class_a': [],
        'count_a': 0,
        'class_b': [],
        'count_b': 0,
        'class_c': [],
        'count_c': 0,
        'link_local': [],
        'count_ll': 0
    }
    count_ips = 0
    for exploit in py_exploits_by_range:
        counted_a = False
        counted_b = False
        counted_c = False
        counted_ll = False
        count_ips += len(exploit.get('ip', []))
        ips = set(exploit.get('ip', []))
        for ip in ips:
            if ip.startswith('10.'):
                result['class_a'].append(ip)
                # count exploits
                if not counted_a:
                    result['count_a'] += 1
                    counted_a = True
            elif ip.startswith('172.16.'):
                result['class_b'].append(ip)
                # count exploits
                if not counted_b:
                    result['count_b'] += 1
                    counted_b = True
            elif ip.startswith('192.168.0.'):
                result['class_c'].append(ip)
                # count exploits
                if not counted_c:
                    result['count_c'] += 1
                    counted_c = True
            elif ip.startswith('169.254.'):
                result['link_local'].append(ip)
                # count exploits
                if not counted_ll:
                    result['count_ll'] += 1

    print('there are {} totally ip addresses in {} exploits with an ip field '
          ' between {} and {}'.format(count_ips, num_exploit_ip, date_greater,
                                      date_lower))
    print('there are {} exploits with {} class a ip addresses between {} and '
          '{}.'.format(result['count_a'], len(result['class_a']), date_greater,
                       date_lower))
    print('there are {} exploits with {} class b ip addresses between {} and '
          '{}.'.format(result['count_b'], len(result['class_b']), date_greater,
                       date_lower))
    print('there are {} exploits with {} class c ip addresses between {} and '
          '{}.'.format(result['count_c'], len(result['class_c']), date_greater,
                       date_lower))
    print('there are {} exploits with {} link local ip addresses between {} '
          'and {}.'.format(result['count_ll'], len(result['link_local']),
                           date_greater, date_lower))
    print('sum of all exploits with private/link-local addresses between {} '
          'and {}: {}'.format(date_greater, date_lower, result['count_a'] +
                              result['count_b'] + result['count_c'] +
                              result['count_ll']))


parser = get_main_config_parser()
database_logger = logging.getLogger(parser.get('logging', 'database'))
db = MongoDBConnection(database_logger)

all_tags = ['id', 'file', 'description', 'date', 'author', 'type', 'platform',
            'port']
ticks = ['date', 'type', 'platform', 'port', 'tested-version', 'version',
         'tested-on', 'google-dork', 'md5', 'analyzed-port', 'user-agent',
         'payload', 'content-type']
tags_no_analyzed = all_tags[:]
all_tags.extend(parser.get('analyzer', 'comment_tags').split(','))
all_tags.extend(parser.get('analyzer', 'code_tags').split(','))

# e-mail is merged with email, so we can remove it from list
all_tags.remove('e-mail')

# port is one key of the csv file. not every exploit has one value for this key
all_tags.extend(
    ['cve', 'ip', 'additional-urls', 'additional-emails', 'group'])
extension = 'py'
date_lower_newer = '2018-12-31'
date_lower_older = '2008-12-31'
# first exploit
date_greater_newer = '2009-01-01'
date_greater_older = '1988-01-01'

quarantine_dir = parser.get('separator', 'quarantine_dir')
qua_code_dir = os.path.join(quarantine_dir, 'code')
quarantined_exploits = []
for (dirpath, _, filenames) in os.walk(qua_code_dir):
    if filenames:
        # remove the trailing slash
        exploit_path = dirpath.replace(qua_code_dir, '')[1:]
        full_exploit_path = [
            os.path.join(exploit_path, filename) for filename in filenames]
        quarantined_exploits.extend(full_exploit_path)

found_quarantined_exploits_ten = 0
found_port_ten = 0
found_quarantined_exploits_rest = 0
found_port_rest = 0
out_of_range_quarantined = 0
for quarantine_exploit in quarantined_exploits:
    exploit_rest = None
    exploit_ten = db.find_exploit_by_file_in_date_range(
        quarantine_exploit, date_lower_newer, date_greater_newer)
    if exploit_ten is not None:
        found_quarantined_exploits_ten += 1
        if exploit_ten['port']:
            found_port_ten += 1
    else:
        exploit_rest = db.find_exploit_by_file_in_date_range(
            quarantine_exploit, date_lower_older, date_greater_older)
        if exploit_rest is not None:
            found_quarantined_exploits_rest += 1
            if exploit_rest['port']:
                found_port_rest += 1
    if exploit_ten is None and exploit_rest is None:
        out_of_range_quarantined += 1
print('total number of quarantined exploits: {}'.format(
    len(quarantined_exploits)))
print(
    'number of quarantined exploits found between {} and {}: {}'
    .format(date_greater_newer, date_lower_newer,
            found_quarantined_exploits_ten))
print('number of quarantined exploits with port between {} and {}: {}'.format(
    date_greater_newer, date_lower_newer, found_port_ten))
print(
    'number of quarantined exploits found between {} and {}: {}'
    .format(date_greater_older, date_lower_older,
            found_quarantined_exploits_rest))
print('number of quarantined exploits with port between {} and {}: {}'.format(
    date_greater_older, date_lower_older, found_port_rest))
print('number of qurantined exploits which are not in range of {}-{} and '
      '{}-{}: {}'.format(date_greater_newer, date_lower_newer,
                         date_greater_older, date_lower_older,
                         out_of_range_quarantined))

number_exploits_ten = db.count_all_documents_by_extension_in_date_range(
    extension, date_lower_newer, date_greater_newer)
print('number of {}-exploits between {} and {}: {}'.format(
    extension, date_greater_newer, date_lower_newer, number_exploits_ten))
number_exploits_ten = number_exploits_ten - found_quarantined_exploits_ten
print('number of {}-exploits without qurantined exploits between {} and {}: {}'
      .format(extension, date_greater_newer, date_lower_newer,
              number_exploits_ten))

number_exploits_rest = db.count_all_documents_by_extension_in_date_range(
    extension, date_lower_older, date_greater_older)
print('number of {}-exploits between {} and {}: {}'.format(
    extension, date_greater_older, date_lower_older, number_exploits_rest))
number_exploits_rest = number_exploits_rest - found_quarantined_exploits_rest
print('number of {}-exploits without qurantined exploits between {} and {}: {}'
      .format(extension, date_greater_older, date_lower_older,
              number_exploits_rest))

print('number of the following tags of {}-exploits between {} and '
      '{}'.format(extension, date_greater_newer, date_lower_newer))

sum_exploit_count_ten = 0
sum_tag_sum_ten = 0
sum_analyzed_tag_sum_ten = 0
sum_exploit_count_rest = 0
sum_tag_sum_rest = 0
sum_analyzed_tag_sum_rest = 0
print('tag | #hinweise/#exploits {}-{} | #hinweise/#exploits {}-{} | '
      'summe hinweise/exploits {}-{} | precursor | indicator'.format(
          date_greater_newer[:4], date_lower_newer[:4],
          date_greater_older[:4], date_lower_older[:4],
          date_greater_older[:4], date_lower_newer[:4]))
for tag in all_tags:
    tag = tag.replace(' ', '-')

    exploit_count_ten = db.count_tags_by_extension_in_date_range(
        tag, extension, date_lower_newer, date_greater_newer)
    sum_exploit_count_ten += exploit_count_ten
    _, tag_sum_ten = db.sum_of_tags_by_extension_in_date_range(
        tag, extension, date_lower_newer, date_greater_newer)

    exploit_count_rest = db.count_tags_by_extension_in_date_range(
        tag, extension, date_lower_older, date_greater_older)
    sum_exploit_count_rest += exploit_count_rest
    _, tag_sum_rest = db.sum_of_tags_by_extension_in_date_range(
        tag, extension, date_lower_older, date_greater_older)
    if tag in tags_no_analyzed:
        if tag == 'port':
            tag_sum_ten = exploit_count_ten - found_port_ten
            tag_sum_rest = exploit_count_rest - found_port_rest
        else:
            tag_sum_ten = exploit_count_ten - found_quarantined_exploits_ten
            tag_sum_rest = exploit_count_rest - found_quarantined_exploits_rest
        exploit_count_ten = tag_sum_ten
        exploit_count_rest = tag_sum_rest
    else:
        sum_analyzed_tag_sum_ten += tag_sum_ten
        sum_analyzed_tag_sum_rest += tag_sum_rest
    sum_tag_sum_ten += tag_sum_ten
    sum_tag_sum_rest += tag_sum_rest

    if tag == 'ip':
        num_exploit_ip_ten = exploit_count_ten
        num_epxloit_ip_rest = exploit_count_rest
    if tag in ticks:
        tick = 'true'
    else:
        tick = 'false'

    print('{} | {}/{} | {}/{} | {}/{} | {} | {}'.format(
        tag,
        tag_sum_ten, exploit_count_ten,
        tag_sum_rest, exploit_count_rest,
        (tag_sum_ten + tag_sum_rest),
        (exploit_count_ten + exploit_count_rest),
        tick, tick))

print('Summe Hinweise/Anzahl Exploits mit CSV-Werten | '
      '{}/{} | {}/{} | {}/{} | true: 13 false: 23 | true: 13 false: 23 '
      ''.format(
          sum_tag_sum_ten, number_exploits_ten,
          sum_tag_sum_rest, number_exploits_rest,
          (sum_tag_sum_ten + sum_tag_sum_rest),
          (number_exploits_ten + number_exploits_rest)))
print('Summe Hinweise/Anzahl Exploits ohne CSV-Werte | '
      '{}/{} | {}/{} | {}/{} | true: 9 false: 19 | true: 9 false: 19'.format(
          sum_analyzed_tag_sum_ten, number_exploits_ten,
          sum_analyzed_tag_sum_rest, number_exploits_rest,
          (sum_analyzed_tag_sum_ten + sum_analyzed_tag_sum_rest),
          (number_exploits_ten + number_exploits_rest)))

py_exploits_by_range_newer = db.get_exploits_by_file_extension_in_date_range(
    extension, date_lower_newer, date_greater_newer)
_count_local_ip_addresses(py_exploits_by_range_newer, num_exploit_ip_ten,
                          date_lower_newer, date_greater_newer)

py_exploits_by_range_older = db.get_exploits_by_file_extension_in_date_range(
    extension, date_lower_older, date_greater_older)
_count_local_ip_addresses(py_exploits_by_range_older, num_epxloit_ip_rest,
                          date_lower_older, date_greater_older)

db.close()
