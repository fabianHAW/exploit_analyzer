import os
import logging
import pandas as pd
import calendar
import matplotlib.pyplot as plt

from database.db_interface import MongoDBConnection
from config.config_parser import get_config_parser

parser = get_config_parser()
FIGSIZE = (10, 8)
PLOT_DIR = parser.get('visualization', 'plot_dir')
IMAGE_NAME = '{}/{}.png'.format(PLOT_DIR, '{}')
DPI = 300


def format_file_name(name):
    """Replaces spaces, quotation marks, comma and hyphens in a name to a
    connectedly name to use as a filename.

    Args:
        name (str): The name to convert.

    Returns:
        str. The converted name.
    """
    return name.lower().replace(' ', '_').replace('"', '').replace(
        ',', '').replace('-', '_')


def get_simple_countings(df):
    """Generates simple counting statistics for the criterias ports, authors,
    platforms, file extensions and types of exploits. It determines the 10
    largest countings of each criteria.

    Args:
        df (DataFrame): A DataFrame object.

    Returns:
        dict. A dictionary for the countings of ports, authors, platforms,
            file extensions and types as keys and a 3-tuple as values
            containing the DataFrame object, absolute size of exploit counting
            and the real occurrence in the 10 largest countings.
    """

    ports = df['port']
    ports_size = ports.size - ports.isna().sum()
    ports_counts = ports.value_counts(dropna=True)
    nlargest_ports = ports_counts.nlargest(10)
    nlargest_ports = pd.DataFrame(nlargest_ports,
                                  index=nlargest_ports.index.astype(int))
    nlargest_ports.rename(columns={'port': 'count'}, inplace=True)

    authors = df['author']
    authors_size = authors.size
    authors_counts = authors.value_counts(dropna=True)
    nlargest_authors = authors_counts.nlargest(10).to_frame()
    nlargest_authors.rename(columns={'author': 'count'}, inplace=True)

    platforms = df['platform']
    platforms_size = platforms.size
    platforms_counts = platforms.value_counts(dropna=True)
    nlargest_platforms = platforms_counts.nlargest(10).to_frame()
    nlargest_platforms.rename(columns={'platform': 'count'}, inplace=True)

    files = df['file']
    files_size = files.size
    files_counts = files.str.split('.').str[1].value_counts()
    nlargest_files = files_counts.nlargest(10).to_frame()
    nlargest_files.rename(columns={'file': 'count'}, inplace=True)

    types = df['type']
    types_size = types.size
    types_counts = types.value_counts(dropna=True)
    nlargest_types = types_counts.nlargest(10).to_frame()
    nlargest_types.rename(columns={'type': 'count'}, inplace=True)

    return {
        'ports': (nlargest_ports, ports_size, ports_counts.size),
        'authors': (nlargest_authors, authors_size, authors_counts.size),
        'platforms': (nlargest_platforms, platforms_size,
                      platforms_counts.size),
        'files': (nlargest_files, files_size, files_counts.size),
        'types': (nlargest_types, types_size, types_counts.size)
    }


def plot_simple_counting_statistics(df, size, title, critera, figsize):
    """Plots and saves five pie plots of simple countings by the criterias of
    ports, authors, platforms, file extensions and types.

    Args:
        df (DataFrame): A DataFrame object.
        size (int): Size of the absolute counts of exploits by the specific
            criteria.
        title (str): Title of the plot.
        critera (str): The specific criteria title.
    """
    # determine the right percentage quotations of each critera depending on
    # the 10 largest occurrences
    df_per_right = (df['count'] * 100) / size
    # generate a list of labels for the legend of the plot
    labels = sorted(zip(df_per_right.values.round(2), df_per_right.index),
                    key=lambda x: x[0], reverse=True)
    pie_plot = df_per_right.plot.pie(title=title.title(), label='',
                                     figsize=figsize)
    pie_plot.legend(['{}% for "{}"'.format(per, index)
                     for per, index in labels], loc=9,
                    bbox_to_anchor=(0.5, 0.02), ncol=4, title=critera.title())
    plt.savefig(IMAGE_NAME.format(format_file_name(title)), dpi=DPI)
    plt.close()


def plot_four_largest_years(df):
    """Plots and saves a bar plot of the four largest years.

    Args:
        df (DataFrame): A DataFrame object.
    """
    # reindex
    df.index = pd.to_datetime(df.date.values)
    # resample by year and get four largest years
    df_year = df.resample('Y')
    years = df_year.count().nlargest(4, columns=['exploitdb_id']).index.year
    pv = pd.pivot_table(
        df, index=df.index.month,
        columns=df.index.year, values='exploitdb_id', aggfunc='count')
    # change number of month to month name
    pv.index = pv.index.map(lambda x: calendar.month_name[x])
    bar_plot = pv[years].plot.bar(title='4 Largest Years', figsize=(12, 10))
    bar_plot.set_xlabel('Month')
    bar_plot.set_ylabel('Counts')
    plt.savefig(IMAGE_NAME.format(format_file_name(bar_plot.get_title())),
                dpi=DPI)
    plt.close()


def plot_most_exploit_types(df):
    """Plots and saves four bar plots in one plot of the most exploit types
    ordered by the day.

    Args:
        df (DataFrame): A DataFrame object.
    """
    title = '10 days with most {} exploits'
    date_format = '%d %b %Y'
    fig, ax = plt.subplots(nrows=2, ncols=2, sharey=True, figsize=FIGSIZE)

    pivot_table = pd.pivot_table(
        df, index='date', columns='type', values='exploitdb_id',
        aggfunc='count')

    # generate new Series by pivot table and reindexing of each type
    webapps = pivot_table.dropna().nlargest(10, columns='webapps').sort_index()
    webapps.index = pd.to_datetime(webapps.index)
    dos = pivot_table.dropna().nlargest(10, columns='dos').sort_index()
    dos.index = pd.to_datetime(dos.index)
    local = pivot_table.dropna().nlargest(10, columns='local').sort_index()
    local.index = pd.to_datetime(local.index)
    remote = pivot_table.dropna().nlargest(10, columns='remote').sort_index()
    remote.index = pd.to_datetime(remote.index)

    webapps['webapps'].to_frame().plot.bar(
        ax=ax[0, 0], color='red', title=title.format('webapps').title(),
        legend=None)
    dos['dos'].to_frame().plot.bar(
        ax=ax[0, 1], color='blue', title=title.format('dos').title(),
        legend=None)
    local['local'].to_frame().plot.bar(
        ax=ax[1, 0], color='green', title=title.format('local').title(),
        legend=None)
    remote['remote'].to_frame().plot.bar(
        ax=ax[1, 1], color='cyan', title=title.format('remote').title(),
        legend=None)

    # each type gets an own formatter for the date
    webapps_format = plt.FixedFormatter(
        webapps.index.to_series().dt.strftime(date_format))
    dos_format = plt.FixedFormatter(
        dos.index.to_series().dt.strftime(date_format))
    local_format = plt.FixedFormatter(
        local.index.to_series().dt.strftime(date_format))
    remote_format = plt.FixedFormatter(
        remote.index.to_series().dt.strftime(date_format))

    ax[0, 0].xaxis.set_major_formatter(webapps_format)
    ax[0, 1].xaxis.set_major_formatter(dos_format)
    ax[1, 0].xaxis.set_major_formatter(local_format)
    ax[1, 1].xaxis.set_major_formatter(remote_format)

    # set labels of each plot and set the absolute values to the top of each
    # bar
    for row in ax:
        for column in row:
            column.set_ylabel('Counts')
            column.set_xlabel('Date')
            for p in column.patches:
                column.annotate(int(p.get_height()),
                                (p.get_x() * 1.01, p.get_height() * 1.01))

    plt.tight_layout()
    plt.savefig(IMAGE_NAME.format(
        '10_days_with_most_exploited_types_by_date'), dpi=DPI)
    plt.close()


def plot_string_matchings(df, string_matches):
    """Plots and saves a pie plot of several strings which may contain in
    the description.

    Args:
        df (DataFrame): A DataFrame object.
        string_matches (list): A list of strings for matching.
    """

    description = df['description']
    str_counts = {}
    for string in string_matches:
        str_counts[string.split('|')[0].title()] = \
            df[description.str.lower().str.contains(string)][
                'exploitdb_id'].count()
    str_counts['Other'] = description.count() - sum(str_counts.values())
    se_counts = pd.DataFrame(str_counts, columns=['counts'],
                             index=str_counts.keys())
    se_counts['counts'] = pd.Series(str_counts)
    pie_plot = se_counts.plot.pie(
        y='counts', title='Summary of Exploit Types (totally {} Exploits)'
        ''.format(description.count()), figsize=FIGSIZE, label='')
    pie_plot.legend(['{} for "{}"'.format(val, crit)
                     for crit, val in str_counts.items()], loc=9,
                    bbox_to_anchor=(0.5, 0.02), ncol=3,
                    title='Criterias')
    plt.savefig(IMAGE_NAME.format(format_file_name(pie_plot.get_title())),
                dpi=DPI)
    plt.close()


def plot_string_matchings_over_years(df, string_matches, start_yr, end_yr):
    """Plots and saves bar plots of several strings which may contain in
    the description summed by year.

    Args:
        df (DataFrame): A DataFrame object.
        string_matches (list): A list of strings for matching.
        start_yr (str): The year when the plot should start.
        end_yr (str): The year when the plot should end.
    """
    df.index = pd.to_datetime(df['date'])
    for string in string_matches:
        df_date_str = df[df['description'].str.lower().str.contains(string)]
        df_date_str_re = df_date_str[start_yr:end_yr].resample('Y')
        df_date_counts = df_date_str_re['exploitdb_id'].value_counts().\
            to_frame()
        # remove multi index of dataframe
        df_date_reset = df_date_counts.unstack(level=1).xs(
            'exploitdb_id', axis=1, drop_level=True).reset_index()
        df_date_reset.index = df_date_reset['date'].dt.strftime('%Y')
        df_date_sum = df_date_reset.sum(axis=1)
        bar_plot = df_date_sum.plot.bar(
            title='Sum of "{}"-Exploits by Year'.format(
                string.split('|')[0].title()),
            figsize=FIGSIZE, color=['blue'])
        bar_plot.set_xlabel('Year')
        bar_plot.set_ylabel('Sum')
        plt.savefig(IMAGE_NAME.format(format_file_name(bar_plot.get_title())),
                    dpi=DPI)
        plt.close()


def plot_boxplot_by_type(df, start_yr, end_yr):
    """Plots and saves a boxplot by years of the specific exploit types.

    Args:
        df (DataFrame): A DataFrame object.
        start_yr (str): The year when the boxplot should start.
        end_yr (str): The year when the boxplot should end.
    """
    # reindex
    df.index = pd.to_datetime(df['date'])
    # resample by month
    df_date_re = df[start_yr:end_yr].resample('M')
    df_date_counts = df_date_re.type.value_counts()
    # remove multi index of dataframe
    df_date_unstack = df_date_counts.to_frame().unstack(level=1)
    df_date_reset = df_date_unstack.xs(
        'type', axis=1, drop_level=True).reset_index()
    df_date_reset['date'] = df_date_reset['date'].dt.strftime('%Y')
    for item in ['dos', 'remote', 'local', 'webapps']:
        boxplot = df_date_reset[['date', item]].boxplot(
            by='date', figsize=FIGSIZE)
        boxplot.set_title('boxplot for type "{}" between year {} and '
                          '{}'.format(item, start_yr, end_yr).title())
        boxplot.set_xlabel('Year')
        boxplot.set_ylabel('Counts')
        plt.suptitle('')
        plt.savefig(IMAGE_NAME.format(format_file_name(boxplot.get_title())),
                    dpi=DPI)
        plt.close()


def plot_most_years_by_file_extension(df, extension):
    """Plots and saves a pie plot of the relation between exploit type and
    extension. Plots and saves a pie plot of the 10 largest exploit platforms
    by extension as well as a bar plot of most 10 years with number of exploits
    with extension.

    Args:
        df (DataFrame): A DataFrame object.
        extension (str): The name of the extension.

    Returns:
        DataFrame. DataFrame object of most 10 years with number of exploit
            with extension.
    """

    files = df['file']
    ext_files = files[files.str.endswith('{}'.format(extension))]
    df_ext_files = df.loc[ext_files.index]
    df_type_counts = df_ext_files['type'].value_counts()

    # first plot
    pie_plot = df_type_counts.plot.pie(
        autopct='%.2f%%', label='',
        title='relation between {} types and {} {}-extension files'.format(
            df_type_counts.count(), len(df_ext_files), extension).title(),
        figsize=FIGSIZE)
    plt.savefig(IMAGE_NAME.format(format_file_name(pie_plot.get_title())),
                dpi=DPI)
    plt.close()

    # second plot
    nlargest_ext_platforms = df_ext_files['platform'].value_counts()\
        .nlargest(10)
    # generate a list of labels for the legend of the plot
    labels = sorted(zip(nlargest_ext_platforms.values,
                        nlargest_ext_platforms.index),
                    key=lambda x: x[0], reverse=True)
    pie_plot = nlargest_ext_platforms.plot.pie(
        title='most 10 largest platforms by {} {}-extensions'.format(
            len(df_ext_files), extension).title(), figsize=FIGSIZE, label='')
    pie_plot.legend(['{} for "{}"'.format(val, index)
                     for val, index in labels], loc=9,
                    bbox_to_anchor=(0.5, 0.02), ncol=4, title='Platforms')
    plt.savefig(IMAGE_NAME.format(format_file_name(pie_plot.get_title())),
                dpi=DPI)
    plt.close()

    # third plot
    df_ext_files_date = df_ext_files.copy()
    # reindex
    df_ext_files_date.index = pd.to_datetime(df_ext_files_date['date'])
    # resample by year
    df_ext_files_re = df_ext_files_date.resample('Y')
    nlargest_ext = df_ext_files_re.count().nlargest(
        10, columns=['exploitdb_id'])['exploitdb_id'].sort_index()
    nlargest_ext.index = nlargest_ext.index.year
    bar_plot = nlargest_ext.plot.bar(
        figsize=FIGSIZE, title='most 10 years with number of exploits with '
        '{}-extension'.format(extension).title())

    # set labels of each plot and set the absolute values to the top of each
    # bar
    for p in bar_plot.patches:
        bar_plot.annotate(int(p.get_height()),
                          (p.get_x() * 1.01, p.get_height() * 1.01))
    bar_plot.set_xlabel('Year')
    bar_plot.set_ylabel('Counts')
    plt.savefig(IMAGE_NAME.format(format_file_name(bar_plot.get_title())),
                dpi=DPI)
    plt.close()
    return nlargest_ext


def plot_most_years_by_file_extension_together(ext_df):
    """Plots the most years of exploits by file extensions together in one
    bar plot.

    Args:
        ext_df (dict): Dictionary which contains the extension as key
            and the DataFrame object as value.

    """
    df = pd.concat(ext_df.values(), keys=ext_df.keys(), axis=1).fillna(0)
    bar_plot = df.plot.bar(
        figsize=FIGSIZE,
        title='most years with number of exploits with {} extensions'.format(
            ', '.join(ext_df.keys())).title())
    bar_plot.set_xlabel('Year')
    bar_plot.set_ylabel('Counts')
    plt.savefig(IMAGE_NAME.format(format_file_name(bar_plot.get_title()),
                                  dpi=DPI))
    plt.close()


def main():
    """
    Main routine to plot statistics.
    """
    database_logger = logging.getLogger(parser.get('logging', 'database'))
    db = MongoDBConnection(database_logger)

    # delete all files containing in asset dir. this is needed in case of new
    # exploits in database because in some filenames the counting of exploits
    # is represented
    map(
        os.unlink,
        (os.path.join(PLOT_DIR, f) for f in os.listdir(PLOT_DIR)))

    simple_counting_items = [
        ('ports', '10 of {} most used ports ({} of {})', FIGSIZE),
        ('authors', '10 of {} most authors ({} of {})', (12, 10)),
        ('platforms', '10 of {} most exploited platforms ({} of {})', FIGSIZE),
        ('files', '10 of {} most file extensions ({} of {})', FIGSIZE),
        ('types', 'all {} types of exploits ({} of {})', FIGSIZE)
    ]
    vul_types = [
        'sql injection|slqi', 'denial of service|dos',
        'remote code execution|remote code',
        'cross-site scripting|cross site scripting|xss',
        'cross-site request forgery|csrf', 'buffer overflow', 'wordpress',
        'authentication bypass']

    ####
    # get and prepare exploit data
    ####
    df = pd.DataFrame(db.get_all_exploits())

    df.columns.name = 'exploits'
    df.rename(columns={'id': 'exploitdb_id'}, inplace=True)

    ####
    # start plotting statistics
    ####
    simple_counts = get_simple_countings(df.copy())
    for item, comment, figsize in simple_counting_items:
        plot_simple_counting_statistics(
            simple_counts[item][0],
            simple_counts[item][1],
            comment.format(
                simple_counts[item][2], simple_counts[item][0]['count'].sum(),
                simple_counts[item][1]),
            item, figsize)

    plot_four_largest_years(df.copy())

    plot_most_exploit_types(df.copy())

    plot_string_matchings(df.copy(), vul_types)

    plot_string_matchings_over_years(df.copy(), vul_types, '2009', '2018')

    plot_boxplot_by_type(df.copy(), '2009', '2018')

    ext_df = {}
    for ext in ['c', 'cpp', 'py', 'pl', 'txt', 'rb']:
        df_ext = plot_most_years_by_file_extension(df.copy(), ext)
        ext_df[ext] = df_ext
    # for a cleaner bar plot remove txt exploits
    ext_df.pop('txt')

    plot_most_years_by_file_extension_together(ext_df)

    db.close()


if __name__ == "__main__":
    main()
