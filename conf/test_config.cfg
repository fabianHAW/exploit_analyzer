# Informations for analyzing
# comment_tags: Terms to search for in comments.
# comment_group_tags: Terms to search for specific group names in comments.
# code_tags: Terms which are used to search for in code.
[analyzer]
comment_tags = software link,vendor homepage,vendor,tested version,version,tested on,steps to reproduce,google dork,usage,example,reference,md5,contact,github,website,email,e-mail,irc
comment_group_tags = milw0rm.com
code_tags = analyzed-port,user-agent,payload,content-type,help-parser-arg,py-imports

# Information about ExploitDB git Repo.
# local_git: Path to the local git repo.
# remote_git: Remote URL to ExploitDB repo.
# exploits_csv_file: Filename of the ExploitDB CSV file.
[git]
local_git = test/data/exploitdb
remote_git = https://github.com/offensive-security/exploitdb.git
exploits_csv_file = files_exploits.csv

# Config for MISP instance and misp event information.
# url: URL to MISP instance. (needed to instantiate MISPIntegrator)
# key: Authentication key for MISP access. (needed to instantiate MISPIntegrator)
# ssl: Enable/disable ssl for MISP REST connection. (needed to instantiate MISPIntegrator)
# out_type: Output type for MISP responses. (needed to instantiate MISPIntegrator)
# debug: Enable/disable debug. (needed to instantiate MISPIntegrator)
# tag: Tag information for the exploitdb analyzer events in MISP. It has the form <tag-name>,<tag-colour>.
# distribution: Which distribution is used for MISP events. 0 := "Your organisation only", 1 := "This community only", 2 := "Connected communities", 3 := "All communities"
# taxonomies: Which taxonomies are used to tag new MISP events.
[misp]
url = http://localhost:8080
key = key
ssl = True
out_type = json
debug = False
tag = exploitdb_analyzer,#13ede0
distribution = 0
taxonomies = CERT-XLM:intrusion-attempts="exploit-known-vuln",CERT-XLM:intrusion-attempts="new-attack-signature",cyber-threat-framework:Engagement="exploit-vulnerabilities",enisa:nefarious-activity-abuse="exploits-exploit-kits",europol-event:exploit-tool-exhausting-resources


# MongoDB settings.
# url: URL to MongoDB instance.
[mongodb]
url = localhost:27017

# Filenames for the python test cases.
# read: Filename for the read_file test case in the separator test.
# write: Filename for the write_file test case in the separator test.
# sep_succ: Filename for the success test case in the separator test.
# sep_indent_err: Filename for the error test case in the separator test.
# comment_analyze: Filename for a comment anaylze.
# code_analyze: Filename for a code analyze.
# misp_poc: Filename for a misp poc.
[python-test-files]
read = read_python.py
write = write_python.py
sep_succ = sep_python.py
sep_indent_err = sep_python_indent.py
comment_analyze = comment_analyze.py
code_analyze = code_analyze.py
misp_poc = misp_poc.py

# Separator config.
# type: Type of separator.
# comment_dir: Absolute path where to store the separated comments.
# code_dir: Absolute path where to store the separated code.
# quarantine_dir: Absolute path where to store the files which are failed to separate.
[separator]
type = python
comment_dir = test/data/comments
code_dir = test/data/code
quarantine_dir = test/data/quarantine
