import logging
import logging.config

from src.exploitdb.exploit_fetcher import fetch_exploits
from src.exploitdb.exploit_separator import Separator
from src.database.db_interface import MongoDBConnection
from src.config.config_parser import get_config_parser
from src.exploitdb.exploit_analyzer import CommentAnalyzer, CodeAnalyzer
from src.utils.utils import merge_results


parser = get_config_parser()
db = MongoDBConnection()

logging.config.fileConfig(parser.get('logging', 'conf'))
exploitdb_logger = logging.getLogger(parser.get('logging', 'exploitdb'))
parsoerror_logger = logging.getLogger(parser.get('logging', 'parsoerror'))

exploitdb_logger.info('Fetch exploits from GitHub and store them to DB')
fetch_exploits(parser, db)
exploitdb_logger.info('Finish fetching..')

ps = Separator.create_separator('python', parsoerror_logger)
ca = CommentAnalyzer()
cda = CodeAnalyzer()

exploitdb_logger.info('Get exploits from DB')
exploits = list(db.get_exploits_by_file_extension('py'))
sep_counter = 0
com_analyze_counter = 0
cod_analyze_counter = 0
exploitdb_logger.info('Start iterating exploits..')

for exploit in exploits:
    filename = exploit['file']
    try:
        ps.separate(filename)
    except Exception as e:
        sep_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while separating occurred: {}\nfor file: '
            '{}'.format(e, filename))
    try:
        ca.analyze(filename)
    except Exception as e:
        com_analyze_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while analyzing comments occurred: {}\nfor '
            'file: {}'.format(e, filename))
    try:
        cda.analyze(filename)
    except Exception as e:
        cod_analyze_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while analyzing code occurred: {}\nfor '
            'file: {}'.format(e, filename))

all_results = merge_results(ca.result, cda.result)

print('Total analyzed results: {}'.format(len(all_results)))
print('for testing: now it prints alls exploits with cves or ip addresses in '
      'code and comment')
for k, v in all_results.items():
    if len(v.get('cve', [])) > 0 or len(v.get('ip', [])) > 0:
        print(k, ': ', v)

exploitdb_logger.info(
    'Total exceptions while seperating: {}\n'
    'while comment analyzing: {}\n'
    'while code analyzing: {}'.format(
        sep_counter, com_analyze_counter, cod_analyze_counter))
exploitdb_logger.info(
    'Total number of files where a PythonErrorNode/PythonErrorLeaf occurred: '
    '{}'.format(ps.total_error_count))
db.close()
exploitdb_logger.info('Finish process')
