import logging
import logging.config

from exploitdb.exploit_fetcher import fetch_exploits
from exploitdb.exploit_separator import Separator
from exploitdb.exploit_analyzer import CommentAnalyzer, CodeAnalyzer
from database.db_interface import MongoDBConnection
from config.config_parser import get_config_parser
from utils import utils


try:
    sep_counter = 0
    com_analyze_counter = 0
    com_error_counter = 0
    cod_analyze_counter = 0
    cod_error_counter = 0

    parser = get_config_parser()

    logging.config.fileConfig(parser.get('logging', 'conf'))
    exploitdb_logger = logging.getLogger(parser.get('logging', 'exploitdb'))
    parsoerror_logger = logging.getLogger(parser.get('logging', 'parsoerror'))
    database_logger = logging.getLogger(parser.get('logging', 'database'))

    db = MongoDBConnection(database_logger)

    exploitdb_logger.info('Fetch exploits from GitHub and store them to DB')
    ids = fetch_exploits(parser, db)
    exploitdb_logger.info('Finish fetching..')

    ps = Separator.create_separator('python', parsoerror_logger)
    ca = CommentAnalyzer()
    cda = CodeAnalyzer()

    exploitdb_logger.info('Get exploits from DB')
    if ids is None:
        exploits = list(db.get_exploits_by_file_extension('py'))
    else:
        exploits = list(db.get_exploits_by_file_extension_and_id('py', ids))
except Exception as e:
    exploitdb_logger.error(
        'Unexpected exception while initializing occurred: {}'.format(e),
        exc_info=True)

exploitdb_logger.info(
    'Start iterating with {} exploits..'.format(len(exploits)))

for exploit in exploits:
    filename = exploit['file']
    try:
        ps.separate(filename)
    except Exception as e:
        sep_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while separating occurred: {}\nfor file: '
            '{}'.format(e, filename))
    try:
        ca.analyze(filename)
    except IOError:
        com_error_counter += 1
    except Exception as e:
        com_analyze_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while analyzing comments occurred: {}\nfor '
            'file: {}'.format(e, filename), exc_info=True)
    try:
        cda.analyze(filename)
    except (IOError, IndentationError, SyntaxError):
        cod_error_counter += 1
    except Exception as e:
        cod_analyze_counter += 1
        exploitdb_logger.error(
            'Unexpected exception while analyzing code occurred: {}\nfor '
            'file: {}'.format(e, filename), exc_info=True)

try:
    all_results = utils.merge_results(ca.result, cda.result)
    utils.del_multiple_emails(all_results)
    utils.del_multiple_urls(all_results)
    ca.generate_stats()
    cda.generate_stats()
    db.update_exploits_by_file(all_results)
except Exception as e:
    exploitdb_logger.error(
            'Unexpected exception while handling results occurred: {}'.format(
                e), exc_info=True)

exploitdb_logger.info('***separator stats***')
exploitdb_logger.info(
    'Total unexcepted exceptions while seperating: {}'.format(sep_counter))
exploitdb_logger.info(
    'Total number of files where a PythonErrorNode/PythonErrorLeaf occurred: '
    '{}'.format(ps.total_error_count))
exploitdb_logger.info('***comment analyzing stats***')
exploitdb_logger.info(
    'Total unexcepted exceptions while comment analyzing: {}'.format(
        com_analyze_counter))
exploitdb_logger.info(
    'Total IOError while comment analyzing: {}'.format(com_error_counter))
exploitdb_logger.info('***code analyzing stats***')
exploitdb_logger.info(
    'Total unexcepted exceptions while code analyzing: {}'.format(
        cod_analyze_counter))
exploitdb_logger.info(
    'Total IOError, IndentationError, SyntaxError while code analyzing: '
    '{}'.format(cod_error_counter))
exploitdb_logger.info(
    'Total counts of fetched tags while comment analyzing: {}'.format(
        ca.result_counter))
exploitdb_logger.info(
    'Total counts of fetched tags while code analyzing: {}'.format(
        cda.result_counter))

db.close()
exploitdb_logger.info('Finish process')
